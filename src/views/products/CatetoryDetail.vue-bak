<template>
  <div>
    <a-card :body-style="{ padding: '24px 32px' }" :bordered="false">
      <a-form-model ref="form" :model="form" :rules="rules" :label-col="labelCol" :wrapper-col="wrapperCol">
        <h3 class="title">基本信息</h3>
        <a-form-model-item label="产品分类名称" prop="name">
          <a-input v-model="form.name"/>
          <p class="info negativeTop">-频繁修改产品名称直接影响SEO效果，请仔细斟酌后再提交。</p>
        </a-form-model-item>
        <a-form-model-item label="SEO关键词">
          <div class="seo-box">
            <transition name="slideToggle">
              <div class="seo-input" v-show="showSeo">
                <ul ref="list" class="list">
                  <li v-for="(item, index) in form.keyword.words" :key="index">
                    <a-input v-model="item.keyword" style="width: 200px"></a-input>
                    <a-icon type="menu"></a-icon>
                  </li>
                </ul>
              </div>
            </transition>
            <a-button :icon="showSeo ? 'caret-down' : 'caret-up'" type="link" :ghost="true" @click="showSeo = !showSeo">
              搜索引擎优化设置
            </a-button
            >
            <transition name="slideToggle">
              <div class="seo" v-show="showSeo">
                <a-row :gutter="[10, 10]">
                  <a-col :span="4" :push="1">
                    <span class="label">页面标题</span>
                  </a-col>
                  <a-col :span="19" class="right-padd">
                    <a-input v-model="form.keyword.pageTitle" placeholder="请输入页面标题"/>
                  </a-col>
                </a-row>
                <a-row>
                  <a-col :span="4" :push="1">
                    <span class="label">页面关键词</span>
                  </a-col>
                  <a-col :span="19" class="right-padd">
                    <a-textarea
                      :auto-size="{ minRows: 2, maxRows: 6 }"
                      v-model="form.keyword.pageKeyword"
                      placeholder="请输入页面关键词"
                    />
                  </a-col>
                </a-row>
                <a-row>
                  <a-col :span="4" :push="1">
                    <span class="label">页面描述</span>
                  </a-col>
                  <a-col :span="19" class="right-padd">
                    <a-input v-model="form.keyword.pageDesc" placeholder="请输入页面描述"/>
                  </a-col>
                </a-row>
              </div>
            </transition>
          </div>
        </a-form-model-item>
        <a-form-model-item label="分类URL" class="url">
          <a-radio-group v-model="form.urlValue">
            <a-radio value="a" class="url-radio">系统URL</a-radio>
            <a-radio value="b" class="url-radio">自定义URL</a-radio>
          </a-radio-group>
          <a-input
            class="url-input"
            v-show="form.urlValue === 'b'"
            v-model="form.catUrl"
            placeholder="请输入自定义URL"
          ></a-input>
          <p class="info" v-show="form.urlValue === 'b'">
            - URL必须以/开头，例如：/about-us.html
            <br/>- 频繁修改详情URL直接影响SEO效果，请仔细斟酌后再提交。
          </p>
        </a-form-model-item>
        <a-form-model-item label="选择分类位置" prop="productPosition">
          <!--          <a-tree show-line default-expand-all :selectedKeys.sync="selectedK">-->
          <!--            <a-icon slot="switcherIcon" type="down" />-->
          <!--            <a-tree-node key="0-0" title="所有分类">-->
          <!--              <template v-for="item in category">-->
          <!--                <a-tree-node :key="`0-0-${item.id}`" :title="item.name"></a-tree-node>-->
          <!--              </template>-->
          <!--            </a-tree-node>-->
          <!--          </a-tree>-->

          <a-tree
            show-line
            :autoExpandParent="true"
            :defaultExpandAll="true"
            :tree-data="cateTree"
            show-icon
            :selectedKeys.sync="selectedK">
          </a-tree>
        </a-form-model-item>
        <a-form-model-item label="产品分类图片">
          <a-modal :visible="previewVisible" :footer="null" @cancel="handleCancel">
            <img alt="example" style="width: 100%" :src="previewImage"/>
          </a-modal>
          <ul ref="piclist" class="pic-list">
            <li v-for="(item, index) in picList" :key="index">
              <div class="operate">
                <a-icon type="eye" @click="handlePicPreview(item)"></a-icon>
                <a-icon type="delete" @click="handleDelPic(index)"></a-icon>
              </div>
              <img :src="getRealPic(item)" alt/>
            </li>
            <a-upload
              list-type="picture-card"
              class="img-uploader"
              :action="uploadUrl"
              :file-list="imgList"
              accept="image/*"
              :show-upload-list="false"
              :data="getUploadData"
              :before-upload="getUploadToken"
              @change="handleListUploadChange"
            >
              <div v-if="imgList.length < 8">
                <a-icon type="plus"/>
                <div class="ant-upload-text">上传</div>
              </div>
            </a-upload>
          </ul>
        </a-form-model-item>
        <a-form-model-item label="产品描述">
          <kind-editor ref="kindeditor" @input="getContent"></kind-editor>
        </a-form-model-item>

        <h3 class="title">指向页面</h3>
        <a-divider></a-divider>
        <b>设置分类指向页面</b>
        <p>
          <a-select style="width: 120px" :value="form.catWebUrl" @change="onCatWebUrlChange">
            <template v-for="(item, index) in pages">
              <a-select-option :value="item.path" :key="index">{{ item.name }}</a-select-option>
            </template>
          </a-select>
          <a-button style="margin-left: 10px;" @click="showAddNewPage = true">新建页面</a-button>
        </p>
        <b>设置详情指向页面</b>
        <p>
          <a-select style="width: 120px" :value="form.catDescUrl" @change="onCatDescUrlChange">
            <template v-for="(item, index) in pages">
              <a-select-option :value="item.path" :key="index">{{ item.name }}</a-select-option>
            </template>
          </a-select>
          <a-button style="margin-left: 10px;" @click="showAddNewPage = true">新建页面</a-button>
        </p>
        <a-form-model-item>
          <a-button type="primary" @click="handleSubmit" :loading="submitLoading">提交</a-button>
        </a-form-model-item>
      </a-form-model>
      <a-modal v-model="showAddNewPage" title="添加新页面">
        <a-row :gutter="[16, 24]">
          <a-col :span="4">页面名称</a-col>
          <a-col :span="20">
            <a-input v-model="newPageName" placeholder="请输入页面名称"></a-input>
          </a-col>
          <a-col :span="4">路径URL</a-col>
          <a-col :span="20">
            <a-input v-model="newPagePath" placeholder="请输入路径URL，例如'/abc'"></a-input>
          </a-col>
        </a-row>
        <div slot="footer">
          <a-button @click="showAddNewPage = false">取消</a-button>
          <a-button
            type="primary"
            style="margin-left: 10px;"
            @click="handleAddNewPage"
            :disabled="newPageName === '' || newPagePath === ''"
          >
            确定
          </a-button>
        </div>
      </a-modal>
    </a-card>
  </div>
</template>

<script>
  import { mapState, mapMutations } from 'vuex'
  import sortableJS from 'sortablejs'
  import { getUploadSign } from '@/api/products'
  // eslint-disable-next-line no-unused-vars
  import { addCate, updateCate, getProductCate, getCateDetail } from '@/api/category'
  import KindEditor from '@/components/Kindeditor'
  // eslint-disable-next-line no-unused-vars
  const cateTree = [
    {
      title: '所有分类',
      key: '0-0',
      children: []
    }
  ]
  export default {
    name: 'CatetoryDetail',
    components: {
      KindEditor
    },
    data() {
      this.cateTree = cateTree
      return {
        submitLoading: false,
        type: null,
        showAddNewPage: false,
        newPageName: '',
        newPagePath: '',
        fileList: [],
        imgList: [],
        picList: [],
        previewImage: [],
        previewVisible: false,
        uploading: false,
        uploadUrl: process.env.VUE_APP_QINIU_HOST,
        picToken: '',
        fileName: '',
        pages: [],

        queryParam: {},
        selectedK: [],
        labelCol: { span: 4 },
        wrapperCol: { span: 18 },
        showSeo: false,
        customUrl: '',
        category: [],
        content: '',
        form: {
          name: '',
          urlValue: 'a',
          catUrl: '',
          keyword: {
            words: [
              { keyword: '' },
              { keyword: '' },
              { keyword: '' },
              { keyword: '' },
              { keyword: '' },
              { keyword: '' },
              { keyword: '' },
              { keyword: '' }
            ],
            pageTitle: '',
            pageKeyword: '',
            pageDesc: ''
          },
          catPid: '',
          catWebUrl: '',
          catDescUrl: ''
        },
        rules: {
          name: [{ required: true, message: '请输入产品分类名称', trigger: 'blur' }],
          keyword: [{ required: true, message: '请输入分类关键词', trigger: 'blur' }]
        }
      }
    },
    computed: {
      ...mapState({
        page: state => state.pages.page
      })
    },
    created() {
      this.pages = this.page
      const { id } = this.$route.params
      if (!isNaN(id)) {
        this.loadCateDetail(id)
      }
      const { parent } = this.$route.query
      if (parent) {
        console.log(parent)
      }
      const { keyword } = this.$route.query
      if (keyword) {
        this.showSeo = true
        this.form.keyword.words[0] = { keyword: keyword }
      }
      this.loadProductCate()
    },
    mounted() {
      const that = this
      // eslint-disable-next-line no-unused-vars
      const sortable = sortableJS.create(this.$refs.list, {
        sort: true,
        animation: 300,
        onEnd: function(evt) {
          // 拖拽结束发生该事件
          that.form.keyword.words.splice(evt.newIndex, 0, that.form.keyword.words.splice(evt.oldIndex, 1)[0])
          var newArray = that.form.keyword.words.slice(0)
          that.form.keyword.words = []
          that.$nextTick(function() {
            that.form.keyword.words = newArray
            console.log(that.form.keyword.words)
          })
        }
      })
    },
    methods: {
      ...mapMutations(['SET_PAGE']),
      treeTransfer(data, id) {
        function tree(pid) {
          const arr = []
          data
            .filter(item => item.catPid === pid)
            .forEach(item => {
              const obj = {
                title: item.catName,
                key: `0-${pid}-${item.id}`,
                slots: { icon: 'file' }
              }
              const child = tree(item.id)
              if (child.length) {
                obj.children = child
              }
              arr.push(obj)
            })
          return arr
        }

        return tree(id)
      },
      getObjectURL(file) {
        console.log(file)
        var url = null
        // 下面函数执行的效果是一样的，只是需要针对不同的浏览器执行不同的 js 函数而已
        if (window.createObjectURL !== undefined) {
          // basic
          url = window.createObjectURL(file)
        } else if (window.URL !== undefined) {
          // mozilla(firefox)
          url = window.URL.createObjectURL(file)
        } else if (window.webkitURL !== undefined) {
          // webkit or chrome
          url = window.webkitURL.createObjectURL(file)
        }
        return url
      },
      handleListUploadChange(info) {
        this.imgList = info.fileList
        if (info.file.status === 'done') {
          this.picList.push(info.file.response.name)
          console.log(this.picList)
        }
      },
      async getUploadToken() {
        // 获取图片上传凭证
        const param = {
          type: 1
        }
        await getUploadSign(param)
          .then(res => {
            if (res.code === 200) {
              this.picToken = res.data.token
              this.fileName = res.data.fileName
            } else {
              throw res
            }
          })
          .catch(err => {
            this.$message.error(err.msg)
          })
      },
      getUploadData(file) {
        return {
          token: this.picToken,
          key: this.fileName,
          file: file
        }
      },
      getRealPic(name) {
        return process.env.VUE_APP_HOST + '/' + name
      },
      handlePicPreview(name) {
        this.previewImage = process.env.VUE_APP_HOST + '/' + name
        this.previewVisible = true
      },
      handleDelPic(index) {
        this.picList.splice(index, 1)
      },
      handleCancel() {
        this.previewVisible = false
      },
      handleAddNewPage() {
        this.SET_PAGE({
          name: this.newPageName,
          path: this.newPagePath
        })
        this.showAddNewPage = false
      },
      loadCateDetail(id) {
        getCateDetail({ id: id }).then(res => {
          if (res.code === 200) {
            const { data } = res
            const { form } = this
            console.log(data)
            form.name = data.catName
            form.catUrl = data.catUrl ? data.catUrl : '' // 产品url
            form.urlValue = data.catUrl ? 'b' : 'a'
            const keyword = data.catKeyWords.map(item => {
              return {
                keyword: item
              }
            })
            form.keyword.words = Object.assign(form.keyword.words, keyword)
            form.keyword.pageKeyword = data.seoKeyWord
            form.keyword.pageTitle = data.seoTitle
            form.keyword.pageDesc = data.seoDescription
            const pid = Number(data.catPid)
            this.selectedK = pid ? [`0-0-${pid}`] : []
            this.picList = data.catImgList ? data.catImgList : []
            this.content = data.catDescription
            if (data.catWebUrl) {
              this.pages.push({ name: '自定义1', path: `${data.catWebUrl}` })
              form.catWebUrl = data.catWebUrl
            }
            if (data.catDescUrl) {
              if (data.catDescUrl !== data.catWebUrl) {
                this.pages.push({ name: '自定义2', path: `${data.catDescUrl}` })
                form.catDescUrl = data.catDescUrl
              } else {
                form.catDescUrl = data.catWebUrl
              }
            }
            if (form.keyword.pageDesc || form.keyword.pageKeyword || form.keyword.pageTitle) {
              this.showSeo = true
            }
          }
        })
      },
      loadProductCate() {
        getProductCate(this.queryParam).then(res => {
          const { datas } = res.data
          this.category = datas.map(item => {
            return {
              name: item.catName,
              id: item.id
            }
          })
          const cateData = datas.map(item => {
            item.catPid = !item.catPid ? 0 : item.catPid
            return item
          })
          console.log(cateData)
          const cates = this.treeTransfer(cateData, 0)
          this.cateTree[0].children = cates
          // const cate = []
          // for (let i = 0; i < datas.length; i++) {
          //   const item = datas[i]
          //   if (item.id === 0) {
          //     cate.push({
          //       name: item.catName,
          //       key: `0-0-${item.id}`
          //     })
          //     for (let j = 0; j < datas.length; j++) {
          //       const second = datas[j]
          //       if (item.id === second.id) {
          //         cate[i].children = []
          //         cate[i].children.push({
          //           name: second.catName,
          //           key: `0-0-${item.id}-${second.id}`
          //         })
          //       }
          //     }
          //   }
          // }
          // this.category = cate
        })
      },
      handleRemove(file) {
        const index = this.fileList.indexOf(file)
        const newFileList = this.fileList.slice()
        newFileList.splice(index, 1)
        this.fileList = newFileList
      },
      beforeUpload(file) {
        this.fileList = [...this.fileList, file]
        return false
      },
      handleUpload() {
        const { fileList } = this
        const formData = new FormData()
        fileList.forEach(file => {
          formData.append('files[]', file)
        })
        this.uploading = true

        // You can use any AJAX library you like
        // TODO 上传图片
      },
      // 获取编辑器内容
      getContent(content) {
        console.log('content', content)
        this.content = content
      },
      handleCatePageChange(value) {
        console.log(`selected ${value}`)
        this.form.catWebUrl = value
      },
      handleDetailPageChange(value) {
        console.log(`selected ${value}`)
        this.form.catDescUrl = value
      },
      onCatWebUrlChange(val) {
        console.log(val)
        this.form.catWebUrl = val
      },
      onCatDescUrlChange(val) {
        console.log(val)
        this.form.catDescUrl = val
      },
      // 提交产品表单
      handleSubmit() {
        const { form, picList } = this
        const titleArr = form.name.split(' ')
        const titleId = titleArr.reduce((acc, cur) => `${acc}-${cur}`)
        const selectedKey = this.selectedK.length ? this.selectedK[0].split('-') : 0
        let params = {}
        params = {
          itemCount: 0,
          catName: form.name,
          catKeyWords: form.keyword.words.map(item => item.keyword),
          seoKeyWords: form.keyword.pageKeyword,
          seoTitle: form.keyword.pageTitle,
          seoDescription: form.keyword.pageDesc,
          catUrl: form.urlValue === 'a' ? `/${titleId}-${new Date().valueOf()}.html` : form.catUrl, // 产品分类URL
          catPid: selectedKey.length ? selectedKey[selectedKey.length - 1] : 0,
          catImgList: picList,
          catDescription: this.content,
          catWebUrl: form.catWebUrl,
          catDescUrl: form.catDescUrl,
          catType: 0
        }

        if (this.$route.params.id) {
          params.id = this.$route.params.id
        }
        this.$refs.form.validate(async valid => {
          if (valid) {
            console.log(params)
            this.submitLoading = true
            let res
            if (params.id) {
              res = await updateCate(params)
            } else {
              res = await addCate(params)
            }
            this.submitLoading = false
            if (res.code === 200) {
              this.$message.success('操作成功')
              console.log(res)
            } else {
              this.$message.error(res.msg)
            }
          } else {
            this.submitLoading = false
            console.log('error submit!!')
            return false
          }
        })
      }
    }
  }
</script>

<style scoped lang="less">
  @import '~ant-design-vue/lib/style/themes/default.less';

  .pic-list {
    display: flex;
    justify-content: flex-start;
    flex-wrap: wrap;
    padding: 0;

    .operate {
      position: absolute;
      left: 8px;
      top: 8px;
      display: none;
      width: 82px;
      height: 82px;
      line-height: 84px;
      text-align: center;
      background: rgba(0, 0, 0, 0.5);
      color: white;

      .anticon {
        margin: 0 4px;
      }
    }

    li {
      position: relative;
      display: block;
      width: 100px;
      height: 100px;
      border: 1px solid #ccc;
      margin-right: 10px;
      padding: 8px;

      &:first-child {
        &:before {
          position: absolute;
          content: '封面';
          padding: 2px 5px;
          height: 24px;
          line-height: 24px;
          background: rgba(0, 0, 0, 0.7);
          color: white;
        }
      }

      &:hover {
        .operate {
          display: block;
        }
      }

      img {
        object-fit: cover;
        width: 100%;
        height: 100%;
      }
    }
  }

  .img-uploader {
    width: 100px;
    height: 100px;
  }

  .seo-box {
    .list {
      padding-left: 0;

      li {
        width: 240px;
        margin: 10px 0;
        padding: 5px;
        background: @background-color-base;
        border-radius: @border-radius-base;

        input {
          margin-right: 10px;
        }
      }
    }

    .panel-box {
      background: #f3f5f7;
      padding: 10px;
    }

    .seo {
      .panel-box;

      .label {
        font-size: @font-size-sm;
      }
    }
  }

  .url {
    display: block;

    .url-input {
      display: inline-block;
      width: 180px;
    }

    .url-radio {
      border: 1px solid @border-color-base;
      line-height: 22px;
      padding: 4px 10px;
      border-radius: @border-radius-base;

      &:nth-child(2).ant-radio-wrapper-checked {
        margin-right: 0;
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
        border-right: 0;
      }
    }
  }

  .slideToggle-enter-active,
  .slideToggle-leave-active {
    transition: opacity 0.5s;
  }

  .slideToggle-enter, .slideToggle-leave-to /* .fade-leave-active below version 2.1.8 */ {
    opacity: 0;
  }

  .input-md {
    width: 160px;
  }

  .input-lg {
    width: 420px;
  }

  .right-padd {
    padding-right: 40px !important;
  }

  .ant-btn-background-ghost.ant-btn-link {
    color: @primary-color;
  }
</style>
